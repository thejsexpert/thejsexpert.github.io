<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>My Docs</title><link>https://thejsexpert.github.io/</link><atom:link href="https://thejsexpert.github.io/feed_rss_created.xml" rel="self" type="application/rss+xml" /><language>en</language> <pubDate>Mon, 08 Jul 2024 14:15:10 -0000</pubDate> <lastBuildDate>Mon, 08 Jul 2024 14:15:10 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.11.0</generator> <item> <title>JavaScript Arrow Functions</title> <author>bishow</author> <description>&lt;h1&gt;JavaScript Arrow Functions&lt;/h1&gt;&lt;p&gt;Modern JavaScript introduced arrow functions as alternatives to regular functions. Â­There are two concepts you need to know about arrow functions.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/15/javascript-arrow-functions/</link> <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/15/javascript-arrow-functions/</guid> </item> <item> <title>Prettier Formatter for Visual Studio Code</title> <author>bishow</author> <description>&lt;h1&gt;Prettier Formatter for Visual Studio Code&lt;/h1&gt;&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/14/prettier-formatter-for-visual-studio-code/</link> <pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/14/prettier-formatter-for-visual-studio-code/</guid> </item> <item> <title>History API</title> <author>bishow</author> <description>&lt;h1&gt;History API&lt;/h1&gt;&lt;p&gt;The History API in JavaScript provides methods to manipulate the browser&#39;s history stack programmatically. This allows developers to navigate back and forth between different states of the application without reloading the page. This API is particularly useful in single-page applications (SPAs) and web applications that dynamically load content without full page refreshes.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/13/history-api/</link> <pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/13/history-api/</guid> </item> <item> <title>Handling JSON Parsing Errors in JavaScript: A Practical Approach</title> <author>bishow</author> <description>&lt;h1&gt;Handling JSON Parsing Errors in JavaScript: A Practical Approach&lt;/h1&gt;&lt;p&gt;Parsing JSON strings in JavaScript can sometimes lead to unexpected errors, especially when dealing with data from various sources. One common error encountered is &#34;Unexpected token &#39;s&#39;, &#39;string&#39; is not valid JSON,&#34; indicating an issue with the input string. In this blog, we&#39;ll explore a practical approach to handle such errors effectively.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/12/handling-json-parsing-errors-in-javascript-a-practical-approach/</link> <pubDate>Sun, 12 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/12/handling-json-parsing-errors-in-javascript-a-practical-approach/</guid> </item> <item> <title>Checking Node.js Versions in React Projects</title> <author>bishow</author> <description>&lt;h1&gt;Checking &lt;code&gt;Node.js&lt;/code&gt; Versions in React Projects&lt;/h1&gt;&lt;p&gt;React itself doesn&#39;t directly depend on Node.js version. However, when you&#39;re developing a React application, you typically use Node.js and npm (Node Package Manager) to manage your project&#39;s dependencies, run development servers, and build your application for production.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/11/checking-nodejs-versions-in-react-projects/</link> <pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/11/checking-nodejs-versions-in-react-projects/</guid> </item> <item> <title>Understanding the Difference Between Response Object and Parsed Data Object</title> <author>bishow</author> <description>&lt;h1&gt;Understanding the Difference Between Response Object and Parsed Data Object&lt;/h1&gt;&lt;p&gt;When working with APIs in JavaScript, particularly with the Fetch API, it&#39;s crucial to distinguish between the Response object and the parsed data object obtained from API responses. &lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/05/10/understanding-the-difference-between-response-object-and-parsed-data-object/</link> <pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/05/10/understanding-the-difference-between-response-object-and-parsed-data-object/</guid> </item> <item> <title>form.setFieldsValue vs defaultValue in react</title> <author>bishow</author> <description>&lt;h1&gt;form.setFieldsValue &lt;code&gt;vs&lt;/code&gt; defaultValue in react&lt;/h1&gt;&lt;p&gt;Whether to set the default value using form.setFieldsValue or by using the defaultValue prop in &lt;code&gt;&amp;lt;Select&amp;gt;&lt;/code&gt; depends on your specific use case and preference.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/04/23/formsetfieldsvalue-vs-defaultvalue-in-react/</link> <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/04/23/formsetfieldsvalue-vs-defaultvalue-in-react/</guid> </item> <item> <title>Understanding JavaScript Array Methods: Mutating vs. Non-Mutating</title> <author>bishow</author> <description>&lt;h1&gt;Understanding JavaScript Array Methods: Mutating vs. Non-Mutating&lt;/h1&gt;&lt;p&gt;When working with arrays in JavaScript, it&#39;s crucial to understand the distinction between &lt;strong&gt;mutating&lt;/strong&gt; and &lt;strong&gt;non-mutating&lt;/strong&gt; array methods. This differentiation plays a significant role in how arrays are manipulated and can greatly impact the behavior of your code.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/04/01/understanding-javascript-array-methods-mutating-vs-non-mutating/</link> <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/04/01/understanding-javascript-array-methods-mutating-vs-non-mutating/</guid> </item> <item> <title>Understanding the Impact of the Return Statement in JavaScript&#39;s Map Function</title> <author>bishow</author> <description>&lt;h1&gt;Understanding the Impact of the Return Statement in JavaScript&#39;s Map Function&lt;/h1&gt;&lt;p&gt;In JavaScript, the &lt;code&gt;map&lt;/code&gt; function is a powerful tool for transforming arrays by applying a function to each element. However, the presence or absence of the &lt;code&gt;return&lt;/code&gt; statement within this function can significantly affect its behavior and the resulting output.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/</link> <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/</guid> </item> <item> <title>How to Check the React Version in Your Project</title> <author>bishow</author> <description>&lt;h1&gt;How to Check the React Version in Your Project&lt;/h1&gt;&lt;p&gt;React, a popular JavaScript library for building user interfaces, undergoes regular updates to introduce new features, improvements, and bug fixes. As a React developer, it&#39;s essential to know the version of React used in your project. In this short blog post, we&#39;ll explore how you can easily check the React version of your project.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/01/22/how-to-check-the-react-version-in-your-project/</link> <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/01/22/how-to-check-the-react-version-in-your-project/</guid> </item> <item> <title>React Router v6 Guide</title> <author>bishow</author> <description>&lt;h1&gt;React Router v6 Guide&lt;/h1&gt;&lt;p&gt;React Router is a popular library for handling navigation and routing in React applications. It enables the creation of single-page applications (SPAs) by allowing developers to define the navigation structure of their applications, rendering different components based on the URL, and managing browser history.&lt;/p&gt;</description><link>https://thejsexpert.github.io/blog/2024/01/18/react-router-v6-guide/</link> <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><source url="https://thejsexpert.github.io/feed_rss_created.xml">My Docs</source><guid isPermaLink="true">https://thejsexpert.github.io/blog/2024/01/18/react-router-v6-guide/</guid> </item> </channel></rss>